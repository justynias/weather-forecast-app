package com.just.weatherforecast.data.repository

import androidx.lifecycle.LiveData
import com.just.weatherforecast.data.db.CurrentWeatherDao
import com.just.weatherforecast.data.db.entity.CurrentWeatherResponse
import com.just.weatherforecast.data.network.WeatherNetworkDataSource
import com.just.weatherforecast.data.provider.LocationProvider
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.lang.Exception

const val CURRENT_WEATHER_ID  = 0 // was autogenerated without this

class ForecastRepositoryImpl(
    private val currentWeatherDao:CurrentWeatherDao,
    private val weatherNetworkDataSource:WeatherNetworkDataSource,
    private val locationProvider: LocationProvider
) : ForecastRepository {


    init{
        weatherNetworkDataSource.downloadedCurrentWeather.observeForever{newCurrentWeather->
            persistFetchedCurrentWeather(newCurrentWeather)
        }
    }

    override suspend fun getCurrentWeather():LiveData<CurrentWeatherResponse>{
        return withContext(Dispatchers.IO){
            initWeatherData(null)
            return@withContext currentWeatherDao.getCurrentWeather()
        }
    }
    override suspend fun getError():LiveData<Exception>{
        return weatherNetworkDataSource.error
    }
    override suspend fun setCustomLocation(customLocation: String){
        initWeatherData(customLocation)
    }

    private fun persistFetchedCurrentWeather(fetchedWeather: CurrentWeatherResponse){
        GlobalScope.launch(Dispatchers.IO){
            fetchedWeather.id=CURRENT_WEATHER_ID
            currentWeatherDao.upsert(fetchedWeather)
        }
    }

    private suspend fun initWeatherData(customLocation: String?){
        if(customLocation!=null){
            fetchCurrentWeatherByLocation(customLocation)        }
        else{
           fetchCurrentWeatherByCoordinates()
        }
    }



    private suspend fun fetchCurrentWeatherByLocation(customLocation: String) {

        weatherNetworkDataSource.fetchCurrentWeather(
            null,
            null,
            customLocation
        )

    }
    private suspend fun fetchCurrentWeatherByCoordinates() {
        val lat=locationProvider.getPreferredLocationString()?.substringBefore(",")
        val lon=locationProvider.getPreferredLocationString()?.substringAfter(",")

        if(lat!=null && lon!=null){
            weatherNetworkDataSource.fetchCurrentWeather(
                lat, lon, null
            )
        }
    }

    override suspend fun setDeviceLocation(){
        fetchCurrentWeatherByCoordinates()
    }

}